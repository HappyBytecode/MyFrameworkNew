// Generated by Dagger (https://dagger.dev).
package com.hxyc.myframework.module.actcen;

import com.hxyc.myframework.base.BasePresenter_MembersInjector;
import com.hxyc.myframework.config.ConfigRepository;
import com.hxyc.myframework.db.SP;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PromoteValuePresenter_Factory implements Factory<PromoteValuePresenter> {
  private final Provider<PromoteValueContract.View> viewProvider;

  private final Provider<ConfigRepository> userRepositoryProvider;

  private final Provider<SP> mSPProvider;

  public PromoteValuePresenter_Factory(Provider<PromoteValueContract.View> viewProvider,
      Provider<ConfigRepository> userRepositoryProvider, Provider<SP> mSPProvider) {
    this.viewProvider = viewProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.mSPProvider = mSPProvider;
  }

  @Override
  public PromoteValuePresenter get() {
    PromoteValuePresenter instance = newInstance(viewProvider.get(), userRepositoryProvider.get());
    BasePresenter_MembersInjector.injectMSP(instance, mSPProvider.get());
    return instance;
  }

  public static PromoteValuePresenter_Factory create(
      Provider<PromoteValueContract.View> viewProvider,
      Provider<ConfigRepository> userRepositoryProvider, Provider<SP> mSPProvider) {
    return new PromoteValuePresenter_Factory(viewProvider, userRepositoryProvider, mSPProvider);
  }

  public static PromoteValuePresenter newInstance(PromoteValueContract.View view,
      ConfigRepository userRepository) {
    return new PromoteValuePresenter(view, userRepository);
  }
}
