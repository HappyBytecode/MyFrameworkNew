// Generated by Dagger (https://dagger.dev).
package com.hxyc.myframework.common;

import android.app.Application;
import android.content.Context;
import com.hxyc.myframework.api.CommonApi;
import com.hxyc.myframework.base.LibBaseActivity;
import com.hxyc.myframework.config.ConfigRemoteSource;
import com.hxyc.myframework.config.ConfigRemoteSource_Factory;
import com.hxyc.myframework.config.ConfigRepository;
import com.hxyc.myframework.config.ConfigRepository_Factory;
import com.hxyc.myframework.db.SP;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<SP> provideSPProvider;

  private Provider<CommonApi> provideCommonApiProvider;

  private Provider<ConfigRemoteSource> configRemoteSourceProvider;

  private Provider<ConfigRepository> configRepositoryProvider;

  private DaggerAppComponent(AppModule appModuleParam) {

    initialize(appModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam));
    this.provideSPProvider = DoubleCheck.provider(AppModule_ProvideSPFactory.create(appModuleParam, provideContextProvider));
    this.provideCommonApiProvider = DoubleCheck.provider(AppModule_ProvideCommonApiFactory.create(appModuleParam, provideSPProvider));
    this.configRemoteSourceProvider = DoubleCheck.provider(ConfigRemoteSource_Factory.create(provideCommonApiProvider));
    this.configRepositoryProvider = DoubleCheck.provider(ConfigRepository_Factory.create(configRemoteSourceProvider));
  }

  @Override
  public ConfigRepository configRepository() {
    return configRepositoryProvider.get();
  }

  @Override
  public SP sp() {
    return provideSPProvider.get();
  }

  @Override
  public void inject(Application application) {
  }

  @Override
  public void inject(LibBaseActivity baseActivity) {
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new DaggerAppComponent(appModule);
    }
  }
}
